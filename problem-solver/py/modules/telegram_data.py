import telebot
from telebot import types
import time
#from shutdown_manager import shutdown_manager

bot = telebot.TeleBot('7779388088:AAEtaxwQcH43XNAuKuHLRFZsWDdtObTH__Q')

questions = [
    {"text": "–í–æ–ø—Ä–æ—Å 1: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 2: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 3: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 4: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 5: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 6: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 7: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 8: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 9: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 10: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]}
]

user_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç!", callback_data='que_0')
    markup.add(btn1)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ –ò–°–° —é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏–∏",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data.startswith("que_"):
        question_index = int(call.data.split("_")[1])

        if question_index < len(questions):
            question = questions[question_index]
            question_text = question["text"]
            options = question["options"]

            markup = types.InlineKeyboardMarkup()
            for i, option in enumerate(options):
                btn = types.InlineKeyboardButton(option, callback_data=f'ans_{question_index}_{i}')
                markup.add(btn)

            bot.send_message(call.message.chat.id, question_text, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

    elif call.data.startswith("ans_"):
        _, question_index, answer_index = call.data.split("_")
        question_index = int(question_index)
        answer_index = int(answer_index)

        user_id = call.message.chat.id
        if user_id not in user_data:
            user_data[user_id] = []
        user_data[user_id].append((question_index, answer_index))

        selected_option = questions[question_index]["options"][answer_index]

        answer_confirmation_text = f"{call.message.text}\n–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω - –≤–∞—à –æ—Ç–≤–µ—Ç: {selected_option}"

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        bot.edit_message_text(answer_confirmation_text, call.message.chat.id, call.message.message_id)

        next_question_index = question_index + 1
        if next_question_index < len(questions):
            question = questions[next_question_index]
            question_text = question["text"]
            options = question["options"]

            markup = types.InlineKeyboardMarkup()
            for i, option in enumerate(options):
                btn = types.InlineKeyboardButton(option, callback_data=f'ans_{next_question_index}_{i}')
                markup.add(btn)

            bot.send_message(call.message.chat.id, question_text, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

def start_bot():
    while True:
        try:
            bot.polling(none_stop=True, interval=0.5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
            time.sleep(1)
    print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
    bot.stop_polling()