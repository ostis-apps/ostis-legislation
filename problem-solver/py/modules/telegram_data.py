import telebot
from telebot import types
import time
#from shutdown_manager import shutdown_manager

bot = telebot.TeleBot('7779388088:AAEtaxwQcH43XNAuKuHLRFZsWDdtObTH__Q')

questions = [
    {"text": "–í–æ–ø—Ä–æ—Å 1: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 2: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 3: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 4: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 5: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 6: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 7: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 8: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 9: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]},
    {"text": "–í–æ–ø—Ä–æ—Å 10: ", "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4", "–û—Ç–≤–µ—Ç 5"]}
]

user_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç!", callback_data='que_0')
    markup.add(btn1)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ –ò–°–° —é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏–∏",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data.startswith("que_"):
        question_index = int(call.data.split("_")[1])

        if question_index < len(questions):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            question = questions[question_index]
            question_text = question["text"]
            options = question["options"]

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
            markup = types.InlineKeyboardMarkup()
            for i, option in enumerate(options):
                btn = types.InlineKeyboardButton(option, callback_data=f'ans_{question_index}_{i}')
                markup.add(btn)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –∫–Ω–æ–ø–∫–∏
            bot.send_message(call.message.chat.id, question_text, reply_markup=markup)
        else:
            # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            bot.send_message(call.message.chat.id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

    elif call.data.startswith("ans_"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        _, question_index, answer_index = call.data.split("_")
        question_index = int(question_index)
        answer_index = int(answer_index)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = call.message.chat.id
        if user_id not in user_data:
            user_data[user_id] = []
        user_data[user_id].append((question_index, answer_index))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        selected_option = questions[question_index]["options"][answer_index]

        # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞
        answer_confirmation_text = f"{call.message.text}\n–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω - –≤–∞—à –æ—Ç–≤–µ—Ç: {selected_option}"

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        bot.edit_message_text(answer_confirmation_text, call.message.chat.id, call.message.message_id)

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        next_question_index = question_index + 1
        if next_question_index < len(questions):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            question = questions[next_question_index]
            question_text = question["text"]
            options = question["options"]

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
            markup = types.InlineKeyboardMarkup()
            for i, option in enumerate(options):
                btn = types.InlineKeyboardButton(option, callback_data=f'ans_{next_question_index}_{i}')
                markup.add(btn)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            bot.send_message(call.message.chat.id, question_text, reply_markup=markup)
        else:
            # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            bot.send_message(call.message.chat.id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")


def start_bot():
    while True:
        try:
            bot.polling(none_stop=True, interval=0.5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
            time.sleep(1)
    print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
    bot.stop_polling()